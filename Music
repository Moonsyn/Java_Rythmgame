package github;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;

import javazoom.jl.player.Player;

public class Music extends Thread { 
	//Thread란 음악을 플레이시키기 위한 하나의 작은 프로그램
	
	private Player player; // Thread에서 상속받은 Player객체
	private boolean isLoop; 
	// Thread에서 상속받은 isLoop객체 -> 노래가 반복재생 되는지 안되는지?
	private File file; // 음악 파일을 받기위한 파일 객체
	private FileInputStream fis; // 파일 객체를 받기위한 FIS객체
	private BufferedInputStream bis; // 파일 객체를 버퍼화시켜서 받기위한 BIS객체
	
	public Music(String name, boolean isLoop) {
		// 노래 제목과 반복재생 여부를 받는 생성자
		try {
			this.isLoop = isLoop; // 반복재생 여부 초기화
			file = new File(Main.class.getResource("../music/" + name).toURI());
			//  입력받은 노래 제목에 해당되는 파일을 실행 (toURI 메소드로 해당 파일의 위치를 가져옴
			fis = new FileInputStream(file);
			bis = new BufferedInputStream(fis); // 해당 파일을 버퍼에 담음
			player = new Player(bis); // player에 해당 파일 담음
		}catch (Exception e) {
			System.out.println(e.getMessage());
			// 오류 발생시 오류 메시지 출력
		}
	}
	
	public int getTime() {//노래가 어느 시간이 실행되고 있는지 알려줌{
		if(player == null) 
			return 0;
		return player.getPosition();
	}
	
	public void close() {//노래가 중단될경우 실행하여 해당곡이 안정적으로 종료{
		isLoop = false;
		player.close();
		this.interrupt(); 
		// 해당 스레드를 중지상태로 만듬
		//(스레드는 우리가 만드는 프로그램과 별도로 존재 -> 그러므로 스레드도 따로 종료시켜줘야함)
	}
	
	@Override // Thread안에 있는 메소드이기 때문에 오버라이드해서 가져옴
	// Thread를 사용할경우 무조건 써야하는 메소드
	public void run() {
		try {
			do {
				player.play(); // 곡 실행
				fis = new FileInputStream(file);
				bis = new BufferedInputStream(fis); 
				player = new Player(bis); 
			}while(isLoop); // 반복여부에 따라 true일 경우 무한 반복
		}catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}
	
}
